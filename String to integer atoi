class Solution {
public:
    int myAtoi(string s) {
        // Step 1: Initialize a variable to track the sign and start scanning the string
        int neg = 2;  // 2 means no sign detected yet, 1 means negative, 0 means positive
        int i = 0;

        // Step 2: Skip leading whitespaces
        while (i < s.size() && s[i] == ' ') {
            i++;
        }

        // Step 3: Check for the sign, either '-' or '+'
        while (i < s.size() && (s[i] == '-' || s[i] == '+')) {
            // If we have a conflicting sign, return 0
            if ((s[i] == '-' && (neg == 0 || neg == 1)) || (s[i] == '+' && (neg == 0 || neg == 1))) {
                return 0;
            }
            // Update the sign
            if (s[i] == '-') {
                neg = 1;
            } else if (s[i] == '+') {
                neg = 0;
            }
            i++;
        }

        // Step 4: If no sign is detected, assume positive
        if (neg == 2) {
            neg = 0;
        }

        // Step 5: Skip leading zeros
        while (i < s.size() && s[i] == '0') {
            i++;
        }

        // Step 6: Initialize a variable to store the resulting integer
        long long ans = 0;

        // Step 7: Process the digits in the string
        while (i < s.size()) {
            // If the current character is not a digit, break the loop
            if (!(s[i] >= '0' && s[i] <= '9')) {
                break;
            }

            // Convert the character to a digit
            int b = s[i] - '0';
            ans = ans * 10 + b;

            // Step 8: Handle overflow for positive numbers
            if (ans >= INT_MAX && neg == 0) {
                return INT_MAX;
            }

            // Step 9: Handle underflow for negative numbers
            long long r = (long long)(INT_MAX) + 1;
            if (ans >= r && neg == 1) {
                return INT_MIN;
            }

            i++;
        }

        // Step 10: Apply the sign if negative
        if (neg == 1) {
            ans = ans * (-1);
        }

        // Step 11: Return the result
        return ans;
    }
};
